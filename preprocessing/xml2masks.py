'''
Using xml files generated by Sedeen to generate color masks
bg masks generated from Otsu thresholding will be added to the color masks
'''

import argparse
import numpy as np
import glob
import xml.etree.ElementTree as ET
import cv2
import os

def hex_to_rgb(hex):
     hex = hex.lstrip("#")
     hlen = len(hex)-2
     return tuple(int(hex[i:i+hlen//3], 16) for i in range(0, hlen, hlen//3))

def overlay_polygon_fcn(graphic_tag , mask_img):
    color = graphic_tag[0].attrib["color"]
    color_code = hex_to_rgb(color)[::-1]
    poly_arr = []
    lgt = len(graphic_tag)-1
    for i, point in enumerate(graphic_tag[lgt]):
        pt = graphic_tag[lgt][i].text
        x, y = pt.split(",")
        x, y = int(float(x)), int(float(y))
        poly_arr.append([x, y])
    poly_arr = np.array( poly_arr, dtype = np.int32 )
    poly_arr = np.asarray(poly_arr).reshape((-1, 1, 2))
    cv2.fillPoly(mask_img, [poly_arr], color_code)
    return mask_img

def overlay_polyline_fcn(graphic_tag , mask_img):
    color = graphic_tag[0].attrib["color"]
    color_code = hex_to_rgb(color)[::-1]
    poly_arr = []
    lgt = len(graphic_tag)-1
    for i, point in enumerate(graphic_tag[lgt]):
        if i==0:
            pt = graphic_tag[lgt][i].text
            x0, y0 = pt.split(",")
            x0, y0 = int(float(x0)), int(float(y0))
        pt = graphic_tag[lgt][i].text
        x, y = pt.split(",")
        x, y = int(float(x)), int(float(y))
        poly_arr.append([x, y])
    poly_arr.append([x0, y0])
    poly_arr = np.array( poly_arr, dtype=np.int32 )
    poly_arr = np.asarray(poly_arr).reshape((-1, 1, 2))
    cv2.fillPoly(mask_img, [poly_arr], color_code)
    return mask_img

def xml2masks(args):
    inpath = args.in_path
    first = args.first_label
    second = args.second_label
    categories = args.categories
    output_path = args.output_path
    bg_path = args.bg_path
    exceptions = args.exceptions

    for category in categories:
        path = os.path.join(inpath , category)
        xml_dir = os.path.join(path , "sedeen")
        rgb_dir = path
        save_dir = os.path.join(output_path,category)
        if not os.path.exists(save_dir):
            os.mkdir(save_dir)

        xml_files = sorted(glob.glob(xml_dir + "/*.xml"))
        for file in xml_files:
            tree = ET.parse(file)
            root = tree.getroot()
            image_tag = root[0]
            image_name = image_tag.attrib["identifier"]

            try:
                rgb_file_name = os.path.join(rgb_dir , image_name)
                print("Processing: " + rgb_file_name)
                if len(image_tag) != 0:
                    bg_mask_path = rgb_file_name.replace(inpath,bg_path)
                    bg_mask_path = bg_mask_path.replace(".tif",".png")
                    mask_img = cv2.imread(bg_mask_path)
                    overlay_tags = image_tag[3]

                    for graphic_tag in overlay_tags:
                        if graphic_tag.attrib["name"] == first:
                            mask_img = overlay_polygon_fcn(graphic_tag , mask_img)

                    for graphic_tag in overlay_tags:
                        if graphic_tag.attrib["name"] == second:
                            mask_img = overlay_polygon_fcn(graphic_tag , mask_img)

                    for graphic_tag in overlay_tags:
                        if graphic_tag.attrib["name"] != first and graphic_tag.attrib["name"] != second and graphic_tag.attrib["name"] not in exceptions:
                            
                            if graphic_tag.attrib["type"] == "polygon":
                                mask_img = overlay_polygon_fcn(graphic_tag , mask_img)
                            else:
                                mask_img = overlay_polyline_fcn(graphic_tag , mask_img)

                    cv2.imwrite(os.path.join(save_dir , image_name.replace(".tif", ".png")), mask_img.astype(np.uint8))
            except IOError:
                continue
                print("IOError: " + rgb_file_name)
            except:
                print("Error. Continuing with remaining images")
                print("other error: " + rgb_file_name)
                continue

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="generate color masks from " +
                                     "xml files of annotations (in sedeen)")

    # General settings
    parser.add_argument("--in_path", default= "/projects/patho1/sparse_segmentation/dataset/markings/",
                        help="path to the images and xmls")
    parser.add_argument("--output_path", default= "/projects/patho1/sparse_segmentation/dataset/masks/",
                        help="path to the images and xmls")
    parser.add_argument("--bg_path", default= "/projects/patho1/sparse_segmentation/dataset/bg_masks/",
                        help="path to the background masks")

    parser.add_argument("--categories", default=["1","2","3","4","5"],
                        help="categories to generate masks on")  
    
    parser.add_argument("--first_label",default= "EP",
                        help="the first label to extract as mask")
    parser.add_argument("--second_label", default= "DE",
                        help="the second label to extract as mask")  
    parser.add_argument('--exceptions', nargs='+', help='classes to be excluded', required=False)

    args = parser.parse_args()
    xml2masks(args)
